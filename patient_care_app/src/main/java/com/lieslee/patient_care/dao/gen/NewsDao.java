package com.lieslee.patient_care.dao.gen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lieslee.patient_care.bean.Audio;
import com.lieslee.patient_care.bean.Video;

import com.lieslee.patient_care.bean.News;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS".
*/
public class NewsDao extends AbstractDao<News, Long> {

    public static final String TABLENAME = "NEWS";

    /**
     * Properties of entity News.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Download_status = new Property(0, int.class, "download_status", false, "DOWNLOAD_STATUS");
        public final static Property Progress = new Property(1, float.class, "progress", false, "PROGRESS");
        public final static Property IsInitStatus = new Property(2, boolean.class, "isInitStatus", false, "IS_INIT_STATUS");
        public final static Property Id = new Property(3, Long.class, "id", true, "_id");
        public final static Property Video_id = new Property(4, Long.class, "video_id", false, "VIDEO_ID");
        public final static Property Audio_id = new Property(5, Long.class, "audio_id", false, "AUDIO_ID");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(7, String.class, "description", false, "DESCRIPTION");
        public final static Property Timestamp = new Property(8, Long.class, "timestamp", false, "TIMESTAMP");
        public final static Property Update_time = new Property(9, String.class, "update_time", false, "UPDATE_TIME");
        public final static Property Cover_image = new Property(10, String.class, "cover_image", false, "COVER_IMAGE");
        public final static Property Media_type = new Property(11, int.class, "media_type", false, "MEDIA_TYPE");
        public final static Property Html_download = new Property(12, String.class, "html_download", false, "HTML_DOWNLOAD");
    }

    private DaoSession daoSession;


    public NewsDao(DaoConfig config) {
        super(config);
    }
    
    public NewsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS\" (" + //
                "\"DOWNLOAD_STATUS\" INTEGER NOT NULL ," + // 0: download_status
                "\"PROGRESS\" REAL NOT NULL ," + // 1: progress
                "\"IS_INIT_STATUS\" INTEGER NOT NULL ," + // 2: isInitStatus
                "\"_id\" INTEGER PRIMARY KEY ," + // 3: id
                "\"VIDEO_ID\" INTEGER," + // 4: video_id
                "\"AUDIO_ID\" INTEGER," + // 5: audio_id
                "\"TITLE\" TEXT," + // 6: title
                "\"DESCRIPTION\" TEXT," + // 7: description
                "\"TIMESTAMP\" INTEGER," + // 8: timestamp
                "\"UPDATE_TIME\" TEXT," + // 9: update_time
                "\"COVER_IMAGE\" TEXT," + // 10: cover_image
                "\"MEDIA_TYPE\" INTEGER NOT NULL ," + // 11: media_type
                "\"HTML_DOWNLOAD\" TEXT);"); // 12: html_download
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, News entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getDownload_status());
        stmt.bindDouble(2, entity.getProgress());
        stmt.bindLong(3, entity.getIsInitStatus() ? 1L: 0L);
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(4, id);
        }
 
        Long video_id = entity.getVideo_id();
        if (video_id != null) {
            stmt.bindLong(5, video_id);
        }
 
        Long audio_id = entity.getAudio_id();
        if (audio_id != null) {
            stmt.bindLong(6, audio_id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(9, timestamp);
        }
 
        String update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindString(10, update_time);
        }
 
        String cover_image = entity.getCover_image();
        if (cover_image != null) {
            stmt.bindString(11, cover_image);
        }
        stmt.bindLong(12, entity.getMedia_type());
 
        String html_download = entity.getHtml_download();
        if (html_download != null) {
            stmt.bindString(13, html_download);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, News entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getDownload_status());
        stmt.bindDouble(2, entity.getProgress());
        stmt.bindLong(3, entity.getIsInitStatus() ? 1L: 0L);
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(4, id);
        }
 
        Long video_id = entity.getVideo_id();
        if (video_id != null) {
            stmt.bindLong(5, video_id);
        }
 
        Long audio_id = entity.getAudio_id();
        if (audio_id != null) {
            stmt.bindLong(6, audio_id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(9, timestamp);
        }
 
        String update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindString(10, update_time);
        }
 
        String cover_image = entity.getCover_image();
        if (cover_image != null) {
            stmt.bindString(11, cover_image);
        }
        stmt.bindLong(12, entity.getMedia_type());
 
        String html_download = entity.getHtml_download();
        if (html_download != null) {
            stmt.bindString(13, html_download);
        }
    }

    @Override
    protected final void attachEntity(News entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3);
    }    

    @Override
    public News readEntity(Cursor cursor, int offset) {
        News entity = new News( //
            cursor.getInt(offset + 0), // download_status
            cursor.getFloat(offset + 1), // progress
            cursor.getShort(offset + 2) != 0, // isInitStatus
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // id
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // video_id
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // audio_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // title
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // description
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // timestamp
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // update_time
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // cover_image
            cursor.getInt(offset + 11), // media_type
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // html_download
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, News entity, int offset) {
        entity.setDownload_status(cursor.getInt(offset + 0));
        entity.setProgress(cursor.getFloat(offset + 1));
        entity.setIsInitStatus(cursor.getShort(offset + 2) != 0);
        entity.setId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setVideo_id(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setAudio_id(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDescription(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTimestamp(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setUpdate_time(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCover_image(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMedia_type(cursor.getInt(offset + 11));
        entity.setHtml_download(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(News entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(News entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(News entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getAudioDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getVideoDao().getAllColumns());
            builder.append(" FROM NEWS T");
            builder.append(" LEFT JOIN AUDIO T0 ON T.\"AUDIO_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN VIDEO T1 ON T.\"VIDEO_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected News loadCurrentDeep(Cursor cursor, boolean lock) {
        News entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Audio audio = loadCurrentOther(daoSession.getAudioDao(), cursor, offset);
        entity.setAudio(audio);
        offset += daoSession.getAudioDao().getAllColumns().length;

        Video video = loadCurrentOther(daoSession.getVideoDao(), cursor, offset);
        entity.setVideo(video);

        return entity;    
    }

    public News loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<News> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<News> list = new ArrayList<News>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<News> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<News> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
